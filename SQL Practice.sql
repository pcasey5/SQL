-- Problem 1 --
SELECT BOOK_TITLE, BOOK_COST, BOOK_YEAR
FROM FACT.BOOK;

-- Problem 2 --
SELECT PAT_FNAME, PAT_LNAME
FROM FACT.PATRON;

-- Problem 3--
SELECT CHECK_NUM, CHECK_OUT_DATE, CHECK_DUE_DATE
FROM FACT.CHECKOUT;

--Problem 4--
SELECT BOOK_NUM, BOOK_TITLE AS TITLE, BOOK_YEAR AS "Year Published"
FROM FACT.BOOK;

--Problem 5--
SELECT DISTINCT(BOOK_YEAR)
FROM FACT.BOOK;

--Problem 6--
SELECT DISTINCT(BOOK_SUBJECT)
FROM FACT.BOOK;

--Problem 7--
SELECT PAT_ID AS PATRON, BOOK_NUM AS BOOK, DATEDIFF(DAY, CHECK_OUT_DATE, CHECK_IN_DATE) AS "Days Kept"
FROM FACT.CHECKOUT;

--Problem 8 --
SELECT BOOK_NUM, BOOK_TITLE, BOOK_COST AS "Replacement Cost"
FROM FACT.BOOK;

-- Problem 9--
SELECT PAT_ID, PAT_FNAME + ' ' + PAT_LNAME AS "Patron Name", PAT_TYPE
FROM FACT.PATRON

-- Problem 10--
SELECT BOOK_NUM, CONCAT(BOOK_TITLE, ' (', BOOK_YEAR, ')') AS BOOK, BOOK_SUBJECT
FROM FACT.BOOK;

--Problem 11--
SELECT DISTINCT(FORMAT(CHECK_OUT_DATE, 'MMMM')) AS MONTH
FROM FACT.CHECKOUT;

--Problem 12--
SELECT FACT.AUTHOR.AU_LNAME, FACT.AUTHOR.AU_FNAME, BOOK_NUM
FROM FACT.AUTHOR
JOIN FACT.WRITES ON FACT.WRITES.AU_ID = FACT.AUTHOR.AU_ID;

--Problem 13--
SELECT AU_ID, FACT.WRITES.BOOK_NUM, BOOK_TITLE, BOOK_YEAR
FROM FACT.BOOK
JOIN FACT.WRITES ON FACT.WRITES.BOOK_NUM = FACT.BOOK.BOOK_NUM;

--Problem 14--
SELECT CONCAT(AU_LNAME, ', ', AU_FNAME) AS "Author Name", FACT.BOOK.BOOK_TITLE, FACT.BOOK.BOOK_COST
FROM FACT.BOOK
JOIN FACT.WRITES ON FACT.WRITES.BOOK_NUM = FACT.BOOK.BOOK_NUM
JOIN FACT.AUTHOR ON FACT.AUTHOR.AU_ID = FACT.WRITES.AU_ID;

--Problem 15--
SELECT CHECK_NUM, BOOK_NUM, PAT_ID, FORMAT(CHECK_OUT_DATE,'MMM dd, yyyy') AS "Date Out", FORMAT(CHECK_DUE_DATE, 'MM/dd/yyyy') AS "Date Due"
FROM FACT.CHECKOUT
ORDER BY CHECK_DUE_DATE DESC;

--Problem 16--
SELECT BOOK_TITLE, BOOK_YEAR, BOOK_SUBJECT
FROM FACT.BOOK
ORDER BY BOOK_SUBJECT, BOOK_YEAR DESC, BOOK_TITLE;

--Problem 17--
SELECT FACT.BOOK.PAT_ID, FACT.BOOK.BOOK_NUM, PAT_FNAME, PAT_LNAME, BOOK_TITLE
FROM FACT.BOOK
JOIN FACT.PATRON ON FACT.PATRON.PAT_ID = FACT.BOOK.PAT_ID
ORDER BY PAT_LNAME, BOOK_TITLE;

--Problem 18--
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR
FROM FACT.BOOK
WHERE BOOK_YEAR = 2021;

--Problem 19--
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR
FROM FACT.BOOK
WHERE BOOK_SUBJECT = 'Database';

--Problem 20--
SELECT CHECK_NUM, BOOK_NUM, CHECK_OUT_DATE
FROM FACT.CHECKOUT
WHERE CHECK_OUT_DATE < '04/08/2023';

--Problem 21--
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR
FROM FACT.BOOK
WHERE BOOK_YEAR > 2021 AND BOOK_SUBJECT = 'Programming';

--Problem 22--
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR, BOOK_SUBJECT, BOOK_COST
FROM FACT.BOOK
WHERE (BOOK_SUBJECT = 'Middleware' OR BOOK_SUBJECT = 'Cloud') AND BOOK_COST > 70;

--Problem 23--
SELECT AU_ID, AU_FNAME, AU_LNAME, AU_BIRTHYEAR
FROM FACT.AUTHOR
WHERE AU_BIRTHYEAR > 1979 AND AU_BIRTHYEAR < 1990;

--Problem 24--
SELECT BOOK_NUM, BOOK_TITLE AS Title, BOOK_YEAR AS 'Year Published'
FROM FACT.BOOK
WHERE UPPER(BOOK_TITLE) LIKE '%DATABASE%';

--Problem 25--
SELECT PAT_ID, PAT_FNAME, PAT_LNAME
FROM FACT.PATRON
WHERE PAT_TYPE = 'Student';

--Problem 26--
SELECT PAT_ID, PAT_FNAME, PAT_LNAME, PAT_TYPE
FROM FACT.PATRON
WHERE UPPER(PAT_LNAME) LIKE 'C%';

--Problem 27--
SELECT AU_ID, AU_FNAME, AU_LNAME
FROM FACT.AUTHOR
WHERE AU_BIRTHYEAR IS NULL;

--Problem 28--
SELECT AU_ID, AU_FNAME, AU_LNAME
FROM FACT.AUTHOR
WHERE AU_BIRTHYEAR IS NOT NULL
ORDER BY AU_LNAME, AU_FNAME;

--Problem 29--
SELECT CHECK_NUM, BOOK_NUM, PAT_ID, CHECK_OUT_DATE, CHECK_DUE_DATE
FROM FACT.CHECKOUT
WHERE CHECK_IN_DATE IS NULL
ORDER BY BOOK_NUM;

--Problem 30--
SELECT AU_ID, AU_FNAME, AU_LNAME, AU_BIRTHYEAR
FROM FACT.AUTHOR
ORDER BY AU_BIRTHYEAR DESC, AU_LNAME;

--Problem 31--
SELECT PAT_ID, CONCAT(PAT_FNAME, ' ',PAT_LNAME) AS NAME, PAT_TYPE
FROM FACT.PATRON
ORDER BY PAT_TYPE, PAT_LNAME, PAT_FNAME;

--Problem 32--
SELECT COUNT(BOOK_TITLE) AS 'Number of Books'
FROM FACT.BOOK;

--Problem 33--
SELECT COUNT(DISTINCT(BOOK_SUBJECT)) AS 'Number of Subjects'
FROM FACT.BOOK;

--Problem 34--
SELECT (COUNT(BOOK_NUM) - COUNT(PAT_ID)) AS 'Available Books'
FROM FACT.BOOK


SELECT * FROM FACT.BOOK
--Problem 35--
SELECT FORMAT(MAX(BOOK_COST), 'C') AS 'Most Expensive'
FROM FACT.BOOK;

--Problem 36--
SELECT FORMAT(MIN(BOOK_COST), 'C') AS 'Least Expensive'
FROM FACT.BOOK;

--Problem 37--
SELECT COUNT(DISTINCT(PAT_ID)) AS 'DIFFERENT PATRONS'
FROM FACT.CHECKOUT;

--Problem 38--
SELECT DISTINCT(BOOK_SUBJECT), COUNT(BOOK_SUBJECT) AS 'Books In Subject'
FROM FACT.BOOK
GROUP BY BOOK_SUBJECT
ORDER BY BOOK_SUBJECT;

--Problem 39--
SELECT FACT.AUTHOR.AU_ID, COUNT(BOOK_NUM) AS 'Books Written'
FROM FACT.AUTHOR
JOIN FACT.WRITES ON FACT.WRITES.AU_ID = FACT.AUTHOR.AU_ID
GROUP BY FACT.AUTHOR.AU_ID
ORDER BY COUNT(BOOK_NUM) DESC, FACT.AUTHOR.AU_ID;

--Problem 40xxx--
SELECT FORMAT(CHECK_OUT_DATE, 'MMMM') AS Month, COUNT(FORMAT(CHECK_OUT_DATE, 'MMMM')) AS 'Num Checkouts'
FROM FACT.CHECKOUT
GROUP BY FORMAT(CHECK_OUT_DATE, 'MMMM')
ORDER BY COUNT(FORMAT(CHECK_OUT_DATE, 'MMMM')) DESC

--Problem 41--
SELECT FORMAT(SUM(BOOK_COST), 'C') AS 'Library Value'
FROM FACT.BOOK


--Problem 42--
SELECT BOOK_NUM, COUNT(BOOK_NUM) AS 'Times Checked Out'
FROM FACT.CHECKOUT
WHERE CHECK_OUT_DATE IS NOT NULL
GROUP BY BOOK_NUM
ORDER BY COUNT(BOOK_NUM) DESC, BOOK_NUM;

--Problem 43
SELECT FACT.AUTHOR.AU_ID, CONCAT(AU_FNAME, ' ', AU_LNAME) AS AUTHOR_NAME, FACT.BOOK.BOOK_NUM, BOOK_TITLE
FROM FACT.AUTHOR
JOIN FACT.WRITES ON FACT.WRITES.AU_ID = FACT.AUTHOR.AU_ID
JOIN FACT.BOOK ON FACT.BOOK.BOOK_NUM = FACT.WRITES.BOOK_NUM
WHERE BOOK_SUBJECT LIKE 'CLOUD'
ORDER BY BOOK_TITLE, AU_LNAME;

--Problem 44--
SELECT BOOK_NUM, BOOK_TITLE, FACT.PATRON.PAT_ID, PAT_LNAME, PAT_TYPE
FROM FACT.BOOK
JOIN FACT.PATRON ON FACT.PATRON.PAT_ID = FACT.BOOK.PAT_ID
ORDER BY BOOK_TITLE;


--Problem 45--
SELECT FACT.BOOK.BOOK_NUM, BOOK_TITLE, COUNT(CHECK_OUT_DATE) AS 'Times Checked Out'
FROM FACT.BOOK
LEFT JOIN FACT.CHECKOUT ON FACT.CHECKOUT.BOOK_NUM = FACT.BOOK.BOOK_NUM
GROUP BY FACT.BOOK.BOOK_NUM, BOOK_TITLE
ORDER BY COUNT(CHECK_OUT_DATE) DESC, BOOK_TITLE;

--Problem 46--
SELECT FACT.BOOK.BOOK_NUM, BOOK_TITLE, COUNT(CHECK_OUT_DATE) AS 'Times Checked Out'
FROM FACT.BOOK
JOIN FACT.CHECKOUT ON FACT.CHECKOUT.BOOK_NUM = FACT.BOOK.BOOK_NUM
GROUP BY FACT.BOOK.BOOK_NUM, BOOK_TITLE
HAVING COUNT(CHECK_OUT_DATE) > 5
ORDER BY COUNT(CHECK_OUT_DATE) DESC, BOOK_TITLE

--Problem 47--
SELECT FACT.AUTHOR.AU_ID, AU_FNAME, AU_LNAME, COUNT(B.BOOK_NUM) AS 'Books Written', AVG(BOOK_COST) AS 'Average Cost'
FROM FACT.AUTHOR
JOIN FACT.WRITES W ON W.AU_ID = FACT.AUTHOR.AU_ID
JOIN FACT.BOOK B ON B.BOOK_NUM = W.BOOK_NUM
WHERE (BOOK_SUBJECT = 'Cloud' OR BOOK_SUBJECT = 'Programming')
GROUP BY FACT.AUTHOR.AU_ID, AU_FNAME, AU_LNAME
HAVING COUNT(B.BOOK_NUM) > 1
ORDER BY COUNT(B.BOOK_NUM) DESC, AVG(BOOK_COST), AU_LNAME;

--Problem 48--
SELECT FACT.AUTHOR.AU_ID, AU_LNAME, BOOK_TITLE, CHECK_OUT_DATE, PAT_LNAME
FROM FACT.AUTHOR
JOIN FACT.WRITES ON FACT.WRITES.AU_ID = FACT.AUTHOR.AU_ID
JOIN FACT.CHECKOUT ON FACT.CHECKOUT.BOOK_NUM = FACT.WRITES.BOOK_NUM
JOIN FACT.BOOK ON FACT.BOOK.BOOK_NUM = FACT.CHECKOUT.BOOK_NUM
JOIN FACT.PATRON ON FACT.PATRON.PAT_ID = FACT.BOOK.PAT_ID
WHERE AU_LNAME = 'Bruer' AND PAT_LNAME = 'Miles';

--Problem 49--
SELECT DISTINCT FACT.PATRON.PAT_ID, PAT_FNAME, PAT_LNAME
FROM FACT.PATRON
LEFT JOIN FACT.CHECKOUT C ON C.PAT_ID = FACT.PATRON.PAT_ID
WHERE C.PAT_ID IS NULL
ORDER BY FACT.PATRON.PAT_LNAME, FACT.PATRON.PAT_FNAME

-- Problem 50--
SELECT FACT.BOOK.BOOK_NUM, BOOK_TITLE
FROM FACT.BOOK
LEFT JOIN FACT.CHECKOUT ON FACT.CHECKOUT.BOOK_NUM = FACT.BOOK.BOOK_NUM
WHERE FACT.CHECKOUT.BOOK_NUM IS NULL
ORDER BY BOOK_TITLE;

--Problem 51--
SELECT * 
FROM (SELECT FACT.CHECKOUT.PAT_ID, PAT_LNAME, COUNT(FACT.CHECKOUT.PAT_ID) AS 'NUM CHECKOUTS', COUNT(DISTINCT(FACT.CHECKOUT.BOOK_NUM)) AS 'NUM DIFFERENT BOOKS'
	  FROM FACT.CHECKOUT 
	  JOIN FACT.PATRON ON FACT.PATRON.PAT_ID = FACT.CHECKOUT.PAT_ID	  
	  GROUP BY FACT.CHECKOUT.PAT_ID, PAT_LNAME
	  HAVING COUNT(FACT.CHECKOUT.PAT_ID) >= 3) AS NUMCHECKOUTS	  
	  ORDER BY 'NUM CHECKOUTS' DESC, 'NUM DIFFERENT BOOKS' DESC, PAT_ID;

--OR--
SELECT FACT.CHECKOUT.PAT_ID, PAT_LNAME, COUNT(FACT.CHECKOUT.PAT_ID) AS 'NUM CHECKOUTS', COUNT(DISTINCT(FACT.CHECKOUT.BOOK_NUM)) AS 'NUM DIFFERENT BOOKS'
FROM FACT.CHECKOUT
JOIN FACT.PATRON ON FACT.PATRON.PAT_ID = FACT.CHECKOUT.PAT_ID
GROUP BY FACT.CHECKOUT.PAT_ID, PAT_LNAME
HAVING COUNT(FACT.CHECKOUT.PAT_ID) >= 3
ORDER BY 'NUM CHECKOUTS' DESC, 'NUM DIFFERENT BOOKS' DESC, PAT_ID;

--PROBLEM 52--
SELECT BOOK_NUM, BOOK_TITLE, BOOK_COST
FROM FACT.BOOK, (SELECT AVG(BOOK_COST) AS AVGBOOKCOST FROM FACT.BOOK) AS AVGBOOKCOST
WHERE BOOK_COST > AVGBOOKCOST
ORDER BY BOOK_TITLE;

--PROBLEM 53--
SELECT BOOK_NUM, BOOK_TITLE, BOOK_COST
FROM FACT.BOOK, (SELECT MIN(BOOK_COST) AS MINPROG FROM FACT.BOOK 
				 WHERE BOOK_SUBJECT = 'PROGRAMMING') AS MINPROGRAMMING
WHERE BOOK_COST < MINPROGRAMMING.MINPROG;

--PROBLEM 54--
SELECT PAT_ID, PAT_FNAME, PAT_LNAME
FROM FACT.PATRON
WHERE PAT_ID NOT IN(SELECT PAT_ID FROM FACT.CHECKOUT)
ORDER BY PAT_LNAME, PAT_FNAME;

--PROBLEM 55--
SELECT BOOK_NUM, BOOK_TITLE
FROM FACT.BOOK
WHERE BOOK_NUM NOT IN (SELECT BOOK_NUM FROM FACT.CHECKOUT)
ORDER BY BOOK_TITLE

--PROBLEM 56--
SELECT AU_ID, AU_FNAME, AU_LNAME
FROM FACT.AUTHOR
WHERE AU_ID NOT IN (SELECT AU_ID FROM FACT.WRITES
					JOIN FACT.BOOK ON FACT.BOOK.BOOK_NUM = FACT.WRITES.BOOK_NUM
					WHERE BOOK_SUBJECT = 'PROGRAMMING')
ORDER BY AU_LNAME;

--PROBLEM 57--
SELECT B.BOOK_NUM, B.BOOK_TITLE, B.BOOK_SUBJECT, FORMAT(AVG_COST_PER_SUBJECT.AVG_COST, 'C') AS 'AVG SUBJ COST', FORMAT(B.BOOK_COST - AVG_COST_PER_SUBJECT.AVG_COST, 'C') AS DIFFERENCE
FROM FACT.BOOK AS B, (SELECT BOOK_SUBJECT, AVG(BOOK_COST) AS AVG_COST FROM FACT.BOOK GROUP BY BOOK_SUBJECT) AS AVG_COST_PER_SUBJECT
WHERE B.BOOK_SUBJECT = AVG_COST_PER_SUBJECT.BOOK_SUBJECT
ORDER BY B.BOOK_TITLE;

--PROBLEM 58--
SELECT B.BOOK_NUM, BOOK_TITLE, BOOK_SUBJECT, AU_LNAME, NUM_BOOKS.BOOK_COUNT AS 'NUM BOOKS BY AUTHOR' 
FROM FACT.BOOK B, (SELECT COUNT(FACT.WRITES.BOOK_NUM) AS NUM_BOOKS FROM FACT.WRITES ) AS BOOK_COUNT 
JOIN FACT.WRITES W ON W.BOOK_NUM = B.BOOK_NUM
JOIN FACT.AUTHOR A ON A.AU_ID = W.AU_ID
GROUP BY B.BOOK_NUM, BOOK_TITLE, BOOK_SUBJECT, AU_LNAME



